/**
 * Direct YouTube Transcript API Route
 * 
 * This is a minimal implementation that follows the exact example from 
 * the Supadata documentation: https://supadata.ai/youtube-transcript-api
 */

import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    // Extract test video ID from the query parameters or use a default
    const { searchParams } = new URL(request.url);
    const videoId = searchParams.get('videoId') || 'dQw4w9WgXcQ'; // Default to Rick Roll if no ID provided

    // Get API key from environment variables
    const apiKey = process.env.SUPADATA_API_KEY || '';

    // API key from the environment for testing
    const apiKeyVariants = [
      // API key from environment variable
      apiKey
    ];

    console.log(`Fetching transcript for video ID: ${videoId}`);

    // Different header formats to try
    const headerVariants = [
      // x-api-key header (standard)
      { 'x-api-key': '' },
      // Authorization header with Bearer prefix
      { 'Authorization': 'Bearer ' }
    ] as const;

    // Store errors for logging
    const errors = [];

    // Try each combination of API key and header format
    for (const apiKey of apiKeyVariants) {
      for (const headerTemplate of headerVariants) {
        type HeaderKey = keyof typeof headerTemplate;
        const headerKey = Object.keys(headerTemplate)[0] as HeaderKey; // 'x-api-key' or 'Authorization'
        const headerValue = headerTemplate[headerKey] + apiKey;
        
        console.log(`Trying with header: ${headerKey}`);
        
        try {
          // Following the format from the documentation example
          const response = await fetch(`https://api.supadata.ai/v1/youtube/transcript?videoId=${videoId}`, {
            method: 'GET',
            headers: {
              [headerKey]: headerValue,
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          if (response.ok) {
            console.log(`Success with header: ${headerKey} and API key variant ${apiKeyVariants.indexOf(apiKey) + 1}`);
            
            const data = await response.json();
            
            // Create a combined transcript text from the segments
            let transcript = '';
            if (data.content && Array.isArray(data.content)) {
              transcript = data.content.map((segment: any) => segment.text).join(' ');
            } else if (typeof data.content === 'string') {
              transcript = data.content;
            }

            return NextResponse.json({
              ...data,
              transcript
            });
          } else {
            const errorText = await response.text();
            const errorMessage = `Failed with ${headerKey}: ${response.status}, ${errorText}`;
            console.error(errorMessage);
            errors.push(errorMessage);
          }
        } catch (error: any) {
          const errorMessage = `Exception with ${headerKey}: ${error.message}`;
          console.error(errorMessage);
          errors.push(errorMessage);
        }
      }
    }

    // If we tried all combinations and none worked, return an error
    console.error('All API key and header combinations failed');
    
    return NextResponse.json(
      { 
        error: 'API key error: A valid Supadata API key is required to use this feature.', 
        details: errors 
      },
      { status: 401 }
    );
  } catch (error: any) {
    console.error('Unexpected error:', error);
    return NextResponse.json(
      { error: error.message || 'An unexpected error occurred' },
      { status: 500 }
    );
  }
} 