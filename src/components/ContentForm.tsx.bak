"use client";

import React, { useState, useEffect } from 'react';
import { useContent } from '@/lib/hooks/useContent';
import { useToast } from '@/lib/hooks/useToast';
import { MediaUpload } from './MediaUpload';
import ContentCreationSteps from './ContentCreationSteps';
import ResearchPanel, { ResearchData } from './ResearchPanel';
import YouTubeTranscriptInput from './YouTubeTranscriptInput';

interface ContentFormProps {
  onSuccess?: () => void;
  onResearch?: (contentDetails: any) => void;
  isLoadingRedirect?: boolean;
}

// Content type mapping based on platform
const platformToContentType = {
  'website': 'article',
  'blog': 'blog-post',
  'social': 'social-post',
  'email': 'email',
  'youtube': 'youtube-script',
  'video-script': 'video-script',
  'vlog': 'vlog-script',
  'podcast': 'podcast-script',
  'presentation': 'presentation'
};

// Platform specific options for the second level selection
const PLATFORM_OPTIONS: Record<string, Array<{ id: string, name: string }>> = {
  'social': [
    { id: 'facebook', name: 'Facebook' },
    { id: 'instagram', name: 'Instagram' },
    { id: 'twitter', name: 'Twitter' },
    { id: 'linkedin', name: 'LinkedIn' },
    { id: 'tiktok', name: 'TikTok' }
  ],
  'blog': [
    { id: 'company-blog', name: 'Company Blog' },
    { id: 'medium', name: 'Medium' },
    { id: 'wordpress', name: 'WordPress' }
  ],
  'email': [
    { id: 'newsletter', name: 'Newsletter' },
    { id: 'marketing', name: 'Marketing Email' },
    { id: 'sales', name: 'Sales Email' },
    { id: 'welcome', name: 'Welcome Email' }
  ],
  'video-script': [
    { id: 'explainer', name: 'Explainer Video' },
    { id: 'advertisement', name: 'Advertisement' },
    { id: 'tutorial', name: 'Tutorial' },
    { id: 'product-demo', name: 'Product Demo' }
  ],
  'youtube': [
    { id: 'educational', name: 'Educational' },
    { id: 'entertainment', name: 'Entertainment' },
    { id: 'review', name: 'Review' },
    { id: 'vlog', name: 'Vlog' }
  ],
  'website': [
    { id: 'landing-page', name: 'Landing Page' },
    { id: 'about-page', name: 'About Page' },
    { id: 'product-page', name: 'Product Page' },
    { id: 'services-page', name: 'Services Page' }
  ],
  'podcast': [
    { id: 'interview', name: 'Interview' },
    { id: 'solo', name: 'Solo Episode' },
    { id: 'panel', name: 'Panel Discussion' }
  ],
  'presentation': [
    { id: 'business', name: 'Business Presentation' },
    { id: 'educational', name: 'Educational' },
    { id: 'pitch-deck', name: 'Pitch Deck' }
  ],
  'vlog': [
    { id: 'travel', name: 'Travel Vlog' },
    { id: 'daily', name: 'Daily Vlog' },
    { id: 'tutorial', name: 'Tutorial Vlog' }
  ]
};

export const ContentForm: React.FC<ContentFormProps> = ({ 
  onSuccess,
  onResearch,
  isLoadingRedirect = false
}) => {
  const { saveContent } = useContent();
  const { toast } = useToast();
  
  // Step management
  const [currentStep, setCurrentStep] = useState(1);
  
  // Content form fields
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [tagInput, setTagInput] = useState('');
  const [coverImage, setCoverImage] = useState('');
  const [platform, setPlatform] = useState('social');
  const [subPlatform, setSubPlatform] = useState(''); // Added for specific platform selection
  const [persona, setPersona] = useState('ariastar');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // New fields for research
  const [businessType, setBusinessType] = useState('');
  const [targetAudience, setTargetAudience] = useState('');
  const [audienceNeeds, setAudienceNeeds] = useState('');
  
  // YouTube transcript fields
  const [youtubeTranscript, setYoutubeTranscript] = useState('');
  const [youtubeUrl, setYoutubeUrl] = useState('');
  const [showFullTranscript, setShowFullTranscript] = useState(false);
  
  // Research data
  const [researchData, setResearchData] = useState<ResearchData | null>(null);
  
  // Determine content type based on selected platform
  const getContentType = () => {
    return platformToContentType[platform as keyof typeof platformToContentType] || 'article';
  };
  
  const handleStepChange = (step: number) => {
    if (step === 2 && !title.trim()) {
      toast({
        title: 'Missing Title',
        description: 'Please enter a title before proceeding to research.',
        variant: 'destructive'
      });
      return;
    }
    
    // If moving to step 2 (Research) and onResearch is provided, use deep research flow
    if (step === 2 && onResearch) {
      const contentDetails = {
        contentType: getContentType(),
        platform,
        subPlatform, // Include the selected sub-platform
        businessType: businessType || 'general',
        researchTopic: title,
        targetAudience: targetAudience || 'general audience',
        audienceNeeds,
        youtubeTranscript, // Add YouTube transcript data
        youtubeUrl, // Add YouTube URL
      };
      
      onResearch(contentDetails);
      return;
    }
    
    setCurrentStep(step);
  };
  
  // Reset sub-platform when platform changes
  useEffect(() => {
    setSubPlatform('');
  }, [platform]);
  
  const handleNextStep = () => {
    if (currentStep < 3) {
      handleStepChange(currentStep + 1);
    }
  };
  
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };
  
  const handleResearchComplete = (data: ResearchData) => {
    setResearchData(data);
  };

  const handleAIGenerate = async () => {
    if (!title || !platform || !persona) {
      toast({
        title: 'Missing Information',
        description: 'Please fill in all required fields before generating content.',
        variant: 'destructive'
      });
      return;
    }
    
    // Check if sub-platform is required but not selected
    if (PLATFORM_OPTIONS[platform] && PLATFORM_OPTIONS[platform].length > 0 && !subPlatform) {
      toast({
        title: 'Missing Information',
        description: `Please select a specific ${platform} type before generating content.`,
        variant: 'destructive'
      });
      return;
    }
    
    // In a real implementation, this would call an AI service
    // For now, we'll simulate an AI response
    
    setIsSubmitting(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const selectedTopics = researchData?.trendingTopics.slice(0, 2) || [];
      const keyPoints = researchData?.keyPoints || [];
      const contentType = getContentType();
      
      // Generate specific persona-based introduction
      let personaIntro = '';
      
      // Rich personas get more specialized intros
      switch (persona) {
        case 'ariastar':
          personaIntro = "Hey there friend! It's AriaStar here, and I'm SO excited to chat with you about " + title + ". This is something I've been really diving into lately, and I can't wait to share what I've learned with you!";
          break;
        case 'specialist_mentor':
          personaIntro = "As someone who's dedicated years to mastering this domain, I want to share with you the critical insights about " + title + ". My goal is to distill the most important concepts in a way that accelerates your own journey.";
          break;
        case 'ai_collaborator':
          personaIntro = "Working together, humans and AI can achieve remarkable outcomes. Today, I'd like to explore " + title + " through this collaborative lens, highlighting how our combined perspectives yield superior results.";
          break;
        case 'sustainable_advocate':
          personaIntro = "Living sustainably isn't just a choice—it's a responsibility to our planet. In exploring " + title + ", I want to highlight the eco-conscious approaches that make a genuine difference for our collective future.";
          break;
        case 'data_visualizer':
          personaIntro = "When we look at the data behind " + title + ", fascinating patterns emerge. Let's explore the numbers, trends, and visual insights that tell a compelling story about this topic.";
          break;
        case 'multiverse_curator':
          personaIntro = "Imagine experiencing " + title + " across multiple dimensions and perspectives. Today, we'll journey through different viewpoints and alternate approaches to gain a holistic understanding.";
          break;
        case 'ethical_tech':
          personaIntro = "Technology should serve humanity, not the other way around. Let's examine " + title + " through an ethical lens, considering the human impact and moral implications of these developments.";
          break;
        case 'niche_community':
          personaIntro = "Within our community of passionate enthusiasts, " + title + " has sparked meaningful conversations. I'll share insights from our collective wisdom and the unique perspectives we've developed together.";
          break;
        case 'synthesis_maker':
          personaIntro = "By connecting seemingly disparate ideas about " + title + ", we can discover profound insights. Today, I'll synthesize multiple viewpoints to create a more complete understanding of this complex topic.";
          break;
        case 'professional':
          personaIntro = "In today's professional analysis, we'll examine the key aspects of " + title + " and their implications for stakeholders.";
          break;
        case 'casual':
          personaIntro = "Let's chat about " + title + " in a straightforward way that makes it easy to understand and apply.";
          break;
        case 'technical':
          personaIntro = "This technical breakdown of " + title + " will provide a detailed analysis of the components, methodologies, and implementation strategies.";
          break;
        case 'educational':
          personaIntro = "Today's lesson on " + title + " will cover fundamental concepts, practical applications, and assessment of understanding.";
          break;
        case 'entertaining':
          personaIntro = "Get ready for an exciting journey through the world of " + title + " that will captivate your attention from start to finish!";
          break;
        case 'promotional':
          personaIntro = "Discover how " + title + " can transform your results with these game-changing insights and strategies.";
          break;
        default: // general
          personaIntro = "In this overview of " + title + ", we'll explore the key aspects and relevant insights.";
          break;
      }
      
      // Generate placeholder content based on inputs and persona
      let generatedContent = `# ${title}\n\n## Introduction\n${personaIntro}\n\n`;
      
      if (selectedTopics.length > 0) {
        generatedContent += `## Trending Topics Covered\n${selectedTopics.map(topic => `- ${topic}`).join('\n')}\n\n`;
      }
      
      if (keyPoints.length > 0) {
        generatedContent += `## Key Points\n${keyPoints.map(point => `- ${point}`).join('\n')}\n\n`;
      }
      
      // Special handling for video content types
      if (platform === 'youtube' || platform === 'video-script' || platform === 'vlog') {
        generatedContent += `## Video Script\n`;
        
        // Add persona-specific video intro
        switch (persona) {
          case 'ariastar':
            generatedContent += `[OPENING SCENE - Friendly, casual setting with good lighting]\n`;
            generatedContent += `Hey there, welcome back to the channel! *waves enthusiastically* I'm so excited to chat with you today about ${title}!\n\n`;
            break;
          case 'specialist_mentor':
            generatedContent += `[OPENING SCENE - Professional setting with credentials visible in background]\n`;
            generatedContent += `Welcome, aspiring experts. Today, we're diving deep into ${title} - an area I've spent over a decade mastering.\n\n`;
            break;
          case 'data_visualizer':
            generatedContent += `[OPENING SCENE - Clean, minimal setting with data visualization on screen]\n`;
            generatedContent += `When we analyze the data on ${title}, some fascinating patterns emerge. Let me show you...\n\n`;
            break;
          default:
            generatedContent += `[OPENING SCENE]\n`;
            generatedContent += `Hello everyone, welcome to this ${persona} video about ${title}. Today we'll be covering some key insights on this topic.\n\n`;
        }
        
        generatedContent += `[MAIN CONTENT]\nLet's dive into the main points:\n${keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}\n\n`;
        
        // Add persona-specific closing
        switch (persona) {
          case 'ariastar':
            generatedContent += `[CLOSING - Close-up, warm smile]\nThanks SO much for watching, friends! If you found this helpful, smash that like button and subscribe to join our amazing community! Drop your thoughts in the comments - I read every single one and love hearing from you! See you in the next video! ✌️\n`;
            break;
          case 'specialist_mentor':
            generatedContent += `[CLOSING - Professional posture, direct eye contact]\nAs you implement these strategies, remember that mastery comes through consistent application. If you'd like to deepen your expertise, subscribe for weekly advanced content. Until next time, keep pursuing excellence.\n`;
            break;
          case 'ethical_tech':
            generatedContent += `[CLOSING - Thoughtful expression, subtle environment]\nAs we navigate these technological developments, let's remember to prioritize human well-being and ethical considerations. I'd appreciate hearing your perspectives in the comments. If this resonated with you, consider subscribing for more balanced tech analysis.\n`;
            break;
          default:
            generatedContent += `[CLOSING]\nThanks for watching! Don't forget to like and subscribe for more content like this.\n`;
        }
      } else {
        // Non-video content
        generatedContent += `## Main Content\n`;
        
        // Add persona-specific main content
        switch (persona) {
          case 'ariastar':
            generatedContent += `I've got to tell you, when I first started learning about ${title}, I was totally overwhelmed! But after breaking it down and testing different approaches (with plenty of fails along the way, trust me!), I've discovered some game-changing insights that I just HAVE to share with you.\n\n`;
            generatedContent += `Here's what really made a difference for me:\n\n`;
            keyPoints.forEach(point => generatedContent += `**${point}** - I found this particularly helpful when I was struggling with understanding the basics. It really clicked when I applied it to my own situation!\n\n`);
            generatedContent += `The thing I love most about this topic is how it connects to real life. It's not just theory - it's something you can use TODAY to make a difference.\n\n`;
            break;
          case 'data_visualizer':
            generatedContent += `When we analyze the metrics surrounding ${title}, we uncover revealing patterns that inform our approach. The quantitative evidence suggests several key trends:\n\n`;
            generatedContent += `\`\`\`\nData Snapshot: ${title}\n-----------------------\n`;
            keyPoints.forEach((point, idx) => generatedContent += `Factor ${idx + 1}: ${point} - Impact rating: ${Math.floor(Math.random() * 5) + 6}/10\n`);
            generatedContent += `\`\`\`\n\n`;
            generatedContent += `These data points reveal a clear correlation between implementation strategies and outcome efficacy. The visualization below conceptualizes this relationship:\n\n`;
            generatedContent += `[Data Visualization Placeholder: Relationship between implementation factors and success metrics for ${title}]\n\n`;
            break;
          default:
            generatedContent += `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget felis eget urna ultricies tincidunt. Vestibulum tincidunt est vel mauris facilisis, vel aliquam ipsum pulvinar. Proin euismod, urna vel tincidunt ultricies, nunc justo ultricies nunc, vel tincidunt nisl nunc vel eros.\n\n`;
        }
        
        // Add persona-specific conclusion
        generatedContent += `## Conclusion\n`;
        switch (persona) {
          case 'ariastar':
            generatedContent += `I hope these tips help you as much as they've helped me! Remember, we're all on this journey together, and it's totally okay to make mistakes along the way. That's how we learn and grow! Let me know in the comments if you have any questions or if you've tried any of these approaches yourself. I always love hearing from you! ✨\n`;
            break;
          case 'specialist_mentor':
            generatedContent += `As you implement these expert-level strategies, remember that mastery comes through deliberate practice and iterative refinement. The frameworks presented here have been battle-tested across numerous scenarios, but your unique application will undoubtedly generate valuable insights. Continue to build upon this foundation with disciplined execution, and you'll achieve the superior results that separate leaders from followers in this domain.\n`;
            break;
          case 'ethical_tech':
            generatedContent += `As we navigate the implications of ${title}, let us remember that technology should serve humanity's best interests. The ethical considerations outlined above aren't merely philosophical exercises—they're essential guardrails that ensure our innovations contribute to a more equitable and compassionate world. By maintaining this ethical lens, we can harness the power of technology while preserving our shared values and human dignity.\n`;
            break;
          default:
            generatedContent += `Thank you for reading this AI-generated content. Feel free to edit and enhance it to better match your needs.\n`;
        }
      }
      
      setContent(generatedContent);
      
      toast({
        title: 'Content Generated',
        description: 'AI has created content based on your inputs and research.',
        variant: 'success'
      });
      
      // Move to the final step for editing
      setCurrentStep(3);
    } catch (error) {
      toast({
        title: 'Generation Failed',
        description: 'There was an error generating your content.',
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const handleTagAdd = () => {
    if (tagInput.trim() && !tags.includes(tagInput.trim())) {
      setTags([...tags, tagInput.trim()]);
      setTagInput('');
    }
  };
  
  const handleTagRemove = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };
  
  // Update validation to require subPlatform when available
  const isStep1Valid = () => {
    // Basic validation
    if (!title.trim() || !platform.trim()) {
      return false;
    }
    
    // If platform has sub-options, require selection
    if (PLATFORM_OPTIONS[platform] && PLATFORM_OPTIONS[platform].length > 0 && !subPlatform.trim()) {
      return false;
    }
    
    return true;
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title.trim() || !content.trim()) {
      toast({
        title: 'Missing fields',
        description: 'Please fill in all required fields.',
        variant: 'destructive'
      });
      return;
    }
    
    // Check if sub-platform is required but not selected
    if (PLATFORM_OPTIONS[platform] && PLATFORM_OPTIONS[platform].length > 0 && !subPlatform) {
      toast({
        title: 'Missing sub-platform',
        description: `Please select a specific ${platform} type.`,
        variant: 'destructive'
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      console.log('Saving content with data:', { title, platform, subPlatform, persona, contentType: getContentType() });
      
      // Get current user from auth directly
      const { auth } = await import('@/lib/firebase/firebase');
      const currentUser = auth.currentUser;
      
      if (!currentUser) {
        throw new Error('You must be logged in to save content. Please log in and try again.');
      }
      
      console.log('Current user from Firebase Auth:', currentUser?.uid);
      
      // Create the content data with explicit user ID from auth
      const contentData = {
        title,
        content,
        tags,
        platform,
        subPlatform, // Include the subPlatform in the saved data
        persona,
        status: 'draft' as const,
        contentType: getContentType(),
        mediaUrls: coverImage ? [coverImage] : [],
        userId: currentUser.uid, // Explicitly set user ID from auth
      };
      
      console.log('Final content data with user ID:', contentData);
      
      // Try saving content with a direct call to Firestore
      try {
        // First try the hook
        console.log('Saving content using useContent hook...');
        const contentId = await saveContent(contentData);
        console.log('Content saved successfully with ID:', contentId);
        
        // Toast for success
        toast({
          title: 'Content created',
          description: 'Your content has been saved successfully with ID: ' + contentId,
          variant: 'success'
        });
      } catch (hookError) {
        console.error('Error saving content through hook:', hookError);
        // If hook fails, try direct Firestore access as fallback
        const { collection, addDoc, serverTimestamp } = await import('firebase/firestore');
        const { db } = await import('@/lib/firebase/firebase');
        
        console.log('Trying direct Firestore save as fallback...');
        const docRef = await addDoc(collection(db, 'content'), {
          ...contentData,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        });
        
        console.log('Content saved directly to Firestore with ID:', docRef.id);
        
        toast({
          title: 'Content created (direct)',
          description: 'Your content has been saved directly to Firestore with ID: ' + docRef.id,
          variant: 'success'
        });
      }
      
      // Reset form
      setTitle('');
      setContent('');
      setTags([]);
      setCoverImage('');
      setCurrentStep(1);
      setResearchData(null);
      
      // Force redirect to dashboard after a slight delay
      setTimeout(() => {
        if (onSuccess) {
          console.log('Redirecting to dashboard...');
          onSuccess();
        } else {
          // If no onSuccess callback, navigate directly to dashboard with a full page reload
          console.log('No onSuccess callback, forcing navigation to dashboard...');
          window.location.href = '/dashboard';
        }
      }, 1000);
    } catch (error) {
      console.error('Error saving content:', error);
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'There was an error saving your content. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Handle YouTube transcript fetch
  const handleTranscriptFetched = (transcript: string, url: string) => {
    setYoutubeTranscript(transcript);
    setYoutubeUrl(url);
    
    toast({
      title: 'YouTube Transcript Added',
      description: 'The transcript has been successfully added to your research.',
      variant: 'success'
    });
  };
  
  // Add new section for business type and audience to step 1
  const renderStep1ContentExtended = () => (
    <div className="space-y-6">
      {/* Title */}
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Content Title / Topic <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="mt-1 block w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          placeholder="Enter a title for your content"
          required
        />
      </div>
      
      {/* Business Type */}
      <div>
        <label htmlFor="businessType" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Business Type / Industry
        </label>
        <input
          type="text"
          id="businessType"
          value={businessType}
          onChange={(e) => setBusinessType(e.target.value)}
          className="mt-1 block w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          placeholder="E.g., SaaS, E-commerce, Real Estate, Health & Wellness"
        />
      </div>
      
      {/* Target Audience */}
      <div>
        <label htmlFor="targetAudience" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Target Audience
        </label>
        <input
          type="text"
          id="targetAudience"
          value={targetAudience}
          onChange={(e) => setTargetAudience(e.target.value)}
          className="mt-1 block w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          placeholder="E.g., Small business owners, Marketing professionals, First-time home buyers"
        />
      </div>
      
      {/* Audience Needs */}
      <div>
        <label htmlFor="audienceNeeds" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Audience Needs / Pain Points
        </label>
        <textarea
          id="audienceNeeds"
          value={audienceNeeds}
          onChange={(e) => setAudienceNeeds(e.target.value)}
          rows={3}
          className="mt-1 block w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          placeholder="What problems or challenges does your audience face that your content addresses?"
        />
      </div>
      
      {/* YouTube Transcript Analysis - Added to initial setup */}
      <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-100 dark:border-blue-800 rounded-lg">
        <h4 className="text-sm font-medium text-blue-800 dark:text-blue-300 mb-2">
          YouTube Transcript Analysis
        </h4>
        <p className="text-sm text-blue-700 dark:text-blue-400 mb-4">
          Enhance your research by analyzing an existing YouTube video on this topic.
        </p>
        
        {!youtubeTranscript ? (
          <YouTubeTranscriptInput 
            onTranscriptFetched={handleTranscriptFetched}
          />
        ) : (
          <div className="mt-2">
            <div className="flex items-center justify-between bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md p-3">
              <div>
                <div className="text-sm font-medium text-green-800 dark:text-green-300">YouTube Transcript Added</div>
                <div className="text-xs text-green-700 dark:text-green-400 mb-2">
                  Transcript from {youtubeUrl} will be included in your research
                </div>
                <button
                  onClick={() => setShowFullTranscript(true)}
                  className="text-xs px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors shadow-sm flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  View Transcript
                </button>
              </div>
              <button
                onClick={() => {
                  setYoutubeTranscript('');
                  setYoutubeUrl('');
                  toast({
                    title: 'Transcript Removed',
                    description: 'The YouTube transcript has been removed from your research.',
                    variant: 'default'
                  });
                }}
                className="text-xs px-2 py-1 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-md"
              >
                Remove
              </button>
            </div>
          </div>
        )}
      </div>
      
      {/* Platform Selection */}
      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Platform <span className="text-red-500">*</span>
        </label>
        <div className="mt-2 grid grid-cols-2 sm:grid-cols-3 gap-3">
          {Object.keys(platformToContentType).map((key) => (
            <button
              key={key}
              type="button"
              onClick={() => setPlatform(key)}
              className={`py-3 px-4 border-2 rounded-lg text-center font-medium transition-colors duration-200 ${
                platform === key
                  ? 'bg-blue-50 border-blue-500 text-blue-700 dark:bg-blue-900/30 dark:border-blue-400 dark:text-blue-300 shadow-sm'
                  : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50 hover:border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-700 dark:hover:border-gray-600'
              }`}
            >
              {key.charAt(0).toUpperCase() + key.slice(1)}
            </button>
          ))}
        </div>
        
        {/* Information panel for main platform selection */}
        <div className="mt-3 text-sm text-gray-600 dark:text-gray-400">
          <p>Select the primary platform for your content. This will determine the appropriate content format and optimization.</p>
        </div>
        
        {/* Add Sub-Platform Selection */}
        {platform && PLATFORM_OPTIONS[platform] && (
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Choose Specific {platform.charAt(0).toUpperCase() + platform.slice(1)} Type <span className="text-red-500">*</span>
            </label>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {PLATFORM_OPTIONS[platform].map((option) => (
                <button
                  key={option.id}
                  type="button"
                  onClick={() => setSubPlatform(option.id)}
                  className={`py-3 px-4 border-2 rounded-lg text-center font-medium transition-colors duration-200 ${
                    subPlatform === option.id
                      ? 'bg-blue-50 border-blue-500 text-blue-700 dark:bg-blue-900/30 dark:border-blue-400 dark:text-blue-300 shadow-sm'
                      : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50 hover:border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-700 dark:hover:border-gray-600'
                  }`}
                >
                  {option.name}
                </button>
              ))}
            </div>
            
            {/* Information panel for platform selection */}
            <div className="mt-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-100 dark:border-blue-800 rounded-lg p-4">
              <div className="flex items-start">
                <div className="flex-shrink-0 text-blue-500">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-blue-700 dark:text-blue-300">
                    {/* Removed disclaimer text for cleaner UI */}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Content type information panel */}
        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-100 dark:border-blue-800 rounded-lg p-4 mt-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-3 flex-1">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium text-blue-800 dark:text-blue-300">Content Type</h3>
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200">
                  {getContentType().replace('-', ' ')}
                </span>
              </div>
              <p className="mt-1 text-sm text-blue-700 dark:text-blue-400">
                {/* Removed disclaimer text for cleaner UI */}
              </p>
            </div>
          </div>
        </div>
      </div>
        
      {/* Transcript Modal */}
      {showFullTranscript && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[80vh] flex flex-col">
            <div className="p-4 border-b flex justify-between items-center">
              <h3 className="text-lg font-medium">YouTube Transcript</h3>
              <button
                onClick={() => setShowFullTranscript(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
            <div className="p-4 overflow-y-auto flex-grow">
              <div className="text-sm mb-2">
                <span className="font-medium">Source:</span> <a href={youtubeUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">{youtubeUrl}</a>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded border text-sm whitespace-pre-wrap max-h-full overflow-y-auto">
                {youtubeTranscript}
              </div>
            </div>
            <div className="p-4 border-t flex justify-end">
              <button
                onClick={() => setShowFullTranscript(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm hover:bg-blue-700"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
  
  return (
    <div>
      <ContentCreationSteps 
        currentStep={currentStep} 
        onStepChange={handleStepChange} 
      />
      
      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Step 1: Content Setup */}
        {currentStep === 1 && renderStep1ContentExtended()}

        {/* Step 2: Research - Modified for redirection */}
        {currentStep === 2 && (
          <div className="space-y-6">
            {isLoadingRedirect ? (
              <div className="flex flex-col items-center justify-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-700"></div>
                <p className="mt-4 text-lg text-gray-700 dark:text-gray-300">
                  Redirecting to research page...
                </p>
              </div>
            ) : (
              <>
                <ResearchPanel 
                  contentType={getContentType()}
                  platform={platform}
                  title={title}
                  onResearchComplete={handleResearchComplete}
                />
                
                <div className="flex justify-center">
                  <button
                    type="button"
                    onClick={handleAIGenerate}
                    disabled={isSubmitting}
                    className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md shadow-sm disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Generating...' : 'Generate Content with AI'}
                  </button>
                </div>
              </>
            )}
          </div>
        )}

        {/* Step 3: Generate Content */}
        {currentStep === 3 && (
          <div className="space-y-6">
            <div>
              <label htmlFor="content" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Content
              </label>
              <textarea
                id="content"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                rows={12}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                placeholder="Write your content here..."
                required
              />
            </div>
            
            <div>
              <label htmlFor="tags" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Tags
              </label>
              <div className="mt-1 flex rounded-md shadow-sm">
                <input
                  type="text"
                  id="tags"
                  value={tagInput}
                  onChange={(e) => setTagInput(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      handleTagAdd();
                    }
                  }}
                  className="flex-1 rounded-l-md border-gray-300 focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                  placeholder="Add tags..."
                />
                <button
                  type="button"
                  onClick={handleTagAdd}
                  className="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-700 hover:bg-gray-100 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200 dark:hover:bg-gray-600"
                >
                  Add
                </button>
              </div>
              
              {tags.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {tags.map((tag) => (
                    <span
                      key={tag}
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100"
                    >
                      {tag}
                      <button
                        type="button"
                        onClick={() => handleTagRemove(tag)}
                        className="ml-1.5 inline-flex items-center justify-center w-4 h-4 rounded-full text-blue-400 hover:text-blue-500 dark:text-blue-300 dark:hover:text-blue-200"
                      >
                        <span className="sr-only">Remove tag</span>
                        &times;
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Navigation buttons */}
        <div className="flex justify-between">
          <button
            type="button"
            onClick={handlePrevStep}
            disabled={currentStep === 1 || isSubmitting}
            className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md shadow-sm hover:bg-gray-300 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Previous
          </button>
          
          {currentStep < 3 ? (
            <button
              type="button"
              onClick={handleNextStep}
              disabled={isSubmitting || isLoadingRedirect || (currentStep === 1 && !isStep1Valid())}
              className="px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Next
            </button>
          ) : (
            <button
              type="submit"
              disabled={isSubmitting || !content.trim()}
              className="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? 'Saving...' : 'Save Content'}
            </button>
          )}
        </div>
      </form>
    </div>
  );
}; 